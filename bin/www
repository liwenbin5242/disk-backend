const http = require('http');
const rediser = require('../utils/rediser');
const mongodber = require('../utils/mongodber');
const { ObjectID } = require('mongodb');
const config = require('config');
const {logger} = require('../utils/logger');
const { argonEncryption} = require('../lib/utils');
const SQLitePoolManager = require('../utils/sqliter')

async function initDb() {
    let databases = config.get('MONGODBS');
    await mongodber.init(databases);
    logger.info('mongo is ready!');
}

async function initRedis() {
    const redisConfig = config.get('REDIS');
    await new Promise((resolve) => {
        logger.info(`Redis url: ${redisConfig.host}:${redisConfig.port}`);
        rediser.init(redisConfig, function (err) {
            if (err) {
                logger.error('Connect Redis Error: ' + err);
            } else {
                logger.info('Redis is ready!');
                return resolve();
            }
        });
    });
}

async function initSqlite() {
    const Pool = new SQLitePoolManager()
    await Pool.init()
    logger.info('sqlite is ready!');
}
(async function init() {
    await initSqlite()
    await initDb();
    await initRedis();
    const app = require('../app');
    const port = config.get('app.port');
    app.set('port', port);
    const server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    logger.info('Listening on ' + port);
})();
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = config.get('app.port');
    switch (error.code) {
    case 'EACCES':
        logger.error(bind + ' 权限不足,请使用root权限运行');
        process.exit(1);
    case 'EADDRINUSE':
        logger.error(bind + ' 已被占用');
        process.exit(1);
    default:
        throw error;
    }
}
process.on('uncaughtException', function (err) {
    logger.error('Caught exception: ' + err.stack);
});