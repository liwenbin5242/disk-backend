const http = require('http');
const rediser = require('../utils/rediser');
const mongodber = require('../utils/mongodber');
const { ObjectID } = require('mongodb');
const config = require('config');
const {logger} = require('../utils/logger');
const { argonEncryption} = require('../lib/utils');
const utils = require('../lib/utils');
const axios = require('axios');
const moment = require('moment');
const {serverAuth} = require('../utils/auth');
const {machineId} = require('node-machine-id');
const jobs = require('../scripts/crons')
async function initDb() {
    let databases = config.get('MONGODBS');
    await mongodber.init(databases);
    logger.info('mongo is ready!');
}
async function initRedis() {
    const redisConfig = config.get('REDIS');
    await new Promise((resolve) => {
        rediser.init(redisConfig, function (err) {
            if (err) {
                logger.error('Connect Redis Error: ' + err);
            } else {
                logger.info('Redis is ready!');
                return resolve();
            }
        });
    });
}
async function initMachid() {
    let machid = await machineId();
    let {data: { query }} = await axios.get('http://ip-api.com/json/?lang=zh-CN');
    const data = await axios.post(`${config.get('AuthServer')}/api/agent/register`, {machid, publicip: query});
    if (data?.data?.code === 0) {
        await rediser.set('machid', machid);
    }
}

async function auth() {
    try {
        await serverAuth()
    } catch (error) {
        logger.error(error);
    }
    setInterval(async() => {
        await serverAuth()
    }, 1000 * 60);
}
async function createAdmin() {
    const diskDB = mongodber.use('disk');
    const _id = ObjectID(utils.md5ID('admin'));
    const $setOnInsert = {
        username: 'admin',
        password: await argonEncryption(`admin_${moment().format('YYYYMMDD')}`),
        phone: '',
        name: '管理员',
        avatar: `${config.get('app.url')}/imgs/avatar.jpg`,
        inviter: '', // 邀请人用户名
        role: 'admin', // admin, member,
        level: 1,        // 1 普通用户 2 期限会员 3 永久会员
        coins: 0,        // 积分  
        banners: [],      // 轮播图
        vx: '',          // vx二维码地址
        utm: new Date(),
        ctm: new Date(),
        belongs: '',
        expires: new Date(new Date().getTime() + 30 * 365 * 24 * 60 * 60 * 1000) // 30年后过期
    }; 
    await diskDB.collection('users').updateOne({_id}, {$setOnInsert}, {upsert: true});
}
(async function init() {
    await initDb();
    await initRedis();
    await initMachid();
    await auth();
    await createAdmin();
    const app = require('../app');
    const port = config.get('app.port');
    app.set('port', port);
    const server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    jobs()
    logger.info('Listening on ' + port);
})();
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = config.get('app.port');
    switch (error.code) {
    case 'EACCES':
        logger.error(bind + ' 权限不足,请使用root权限运行');
        process.exit(1);
    case 'EADDRINUSE':
        logger.error(bind + ' 已被占用');
        process.exit(1);
    default:
        throw error;
    }
}
process.on('uncaughtException', function (err) {
    logger.error('Caught exception: ' + err.stack);
});